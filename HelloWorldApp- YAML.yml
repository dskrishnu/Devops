# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

name: BuildDefinitionName)_(Year:yyyy).(Month).(Month).(DayOfMonth)$(Rev:.r)

trigger:
- none

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'
  ProjectName: '**/*.csproj'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '$(ProjectName)'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(ProjectName)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Pack Nuget Package
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byBuildNumber'

- task: DotNetCoreCLI@2
  displayName: Push Nuget Package
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '56b34940-6f27-4d99-9778-4452fed1d327/7da26966-ba09-49c0-8437-f9812867c894'

# - task: DotNetCoreCLI@2
#   displayName: 'Run unit tests - $(buildConfiguration)'
#   inputs:
#     command: 'test'
#     arguments: '--no-build --configuration $(buildConfiguration) /p:threshold=10 /p:thresholdType=line /p:thresholdStat=total /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/'
#     publishTestResults: true
#     projects: '**/*Tests.csproj'

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish code coverage report'
#   inputs:
#     codeCoverageTool: 'cobertura'
#     summaryFileLocation: '$(Pipeline.Workspace)/**/coverage.cobertura.xml'
#     condition: 'succeededOrFailed()' 

# - task: DotNetCoreCLI@2
#   displayName: Publish  
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'

# - task: PublishBuildArtifacts@1
#   displayName: Publish Artifact
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop'
#     publishLocation: 'Container'
